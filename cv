#!/bin/bash
# Convert value from DEC, HEX, or BIN to another base.

# Recent Changes
# +Can take a file containing a list of values as input.
# +Command line options should now be case-insensitive (except filenames).


# TO-DO LIST
# -ASCII support


ERRORMSG=""
INAS=$1
OUTAS=$2
INPUT=$3
BC_OBASE=0
BC_IBASE=0

function debugme # Just a dump of variables for troubleshooting.
{	
	echo "\$INAS:$INAS"
	echo "\$OUTAS:$OUTAS"
	echo "\$INPUT:$INPUT"
	echo "\$BC_OBASE:$BC_OBASE"
	echo "\$BC_IBASE:$BC_IBASE"
	echo "\$FILEINPUT"
	echo "----------"
	echo "${FILEINPUT[*]}"
}

#Checks the previous command ran successfully 
function error_quit #Pass $? as arguement
{
	exitstatus=$1 #Grab error code from previous command
	if [ $exitstatus -ne 0 ]; then #Was above command was successful?
		echo "Something went wrong.  Exiting with error code: $exitstatus"
		exit $1
	fi
}

# Error message handling.
function error_msg
{
	case "$1" in
		quit)
			#Replace error_quit?
		;;
		
		incomplete)
			ERRORMSG="This sript is a work in progress. The function you selected has not been completed yet."
		;;
		
		rtfm)
			ERRORMSG="
			\n
			Usage: cv [BASE IN] [BASE OUT] INPUT or FILENAME*\n
			\tValid base inputs: DEC,BIN,HEX\n
			\n
			*Input files must be a line seperated list of values.\n
			"
	esac
		
		#Display Error
		#whiptail --title "ERROR!" --msgbox "$ERRORMSG" 8 78
		echo -e $ERRORMSG

}

# Check that options were passed at the command line
function option_check
{
	if [ -z $INAS ] || [ -z $OUTAS ] || [ -z $INPUT ]; then
		error_msg rtfm
		exit 1
	fi

	if [ -f $INPUT ]; then # True if $INPUT is a regular file.
		mapfile -t FILEINPUT < "$INPUT" # Declares FILEINPUT array as well as inputs file into it.
		error_quit $?
	fi
}

function calcumatron
{
	# Convert BC_OBASE to match the input base, so it is read properly
	BC_OBASE=$(echo "obase=$BC_IBASE;$BC_OBASE" | bc)

	if [ ${#FILEINPUT[@]} -ne 0 ]; then # File input
		for AN_INPUT in ${FILEINPUT[@]}; do
			# Preforming Conversion
			echo "ibase=$BC_IBASE;obase=$BC_OBASE;${AN_INPUT^^}" | bc
			# ${AN_INPUT^^} ensures the input is upper-case.  An issue if it's hex input
			error_quit $?
	   	done
	
	else	# Command-line input
		# Preform Conversion
		echo "ibase=$BC_IBASE;obase=$BC_OBASE;${INPUT^^}" | bc	
		error_quit $?
	fi
}


# Begin Main

option_check

case ${INAS^^} in # ^^ evaluates $INAS as an upper-case string.
	HEX)
		BC_IBASE=16		
	;;

	BIN)
		BC_IBASE=2
	;;

	DEC)
		BC_IBASE=10
	;;

	ASCII)
		error_msg incomplete
		exit 0
	;;

	*)
		error_msg rtfm
		exit 1
	;;
esac

case ${OUTAS^^} in
	HEX)
		BC_OBASE=16	
	;;

	BIN)
		BC_OBASE=2
	;;

	DEC)
		BC_OBASE=10
	;;

	ASCII)
		error_msg incomplete
		exit 0
	;;

	*)
		error_msg rtfm
		exit 1
	;;
esac

calcumatron
#debugme

